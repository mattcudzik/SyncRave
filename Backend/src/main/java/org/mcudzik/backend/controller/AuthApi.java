/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.mcudzik.backend.controller;

import org.mcudzik.backend.model.dto.GetSessionDTO;
import org.mcudzik.backend.model.dto.GuestAuthRequestDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "auth", description = "the auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/guest : Authorizes user to join given session.
     *
     * @param guestAuthRequestDTO  (required)
     * @return Successfully authorized, returns access token (status code 200)
     *         or Bad Request - invalid session code (status code 400)
     */
    @Operation(
        operationId = "authGuest",
        summary = "Authorizes user to join given session.",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully authorized, returns access token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSessionDTO.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = GetSessionDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - invalid session code", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/guest",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GetSessionDTO> authGuest(
        @Parameter(name = "GuestAuthRequestDTO", description = "", required = true) @Valid @RequestBody GuestAuthRequestDTO guestAuthRequestDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"images\" : [ { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 }, { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 } ], \"href\" : \"href\", \"id\" : \"id\", \"display_name\" : \"display_name\", \"uri\" : \"uri\" }, \"created\" : \"2000-01-23\", \"sessionInvitation\" : { \"code\" : \"code\", \"qrCode\" : \"qrCode\" }, \"name\" : \"name\", \"guests\" : [ { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 }, { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"properties\" : { \"max_songs_per_guest\" : 800827, \"banned_genres\" : [ \"banned_genres\", \"banned_genres\" ], \"generate_playlist\" : true, \"ban_explicit_content\" : false, \"max_number_of_guests\" : 60 }, \"currentPlayerState\" : { \"item\" : { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, \"is_playing\" : true, \"progress_ms\" : 5, \"timestamp\" : 5 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /auth/user : Returns URL to redirect user to authenticate their Spotify Account.
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "authUser",
        summary = "Returns URL to redirect user to authenticate their Spotify Account.",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/user",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> authUser(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /auth/callback : Callback from Spotify Authorization.
     *
     * @param code  (optional)
     * @param error  (optional)
     * @param state  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "callback",
        summary = "Callback from Spotify Authorization.",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/callback",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> callback(
        @Parameter(name = "code", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "code", required = false) String code,
        @Parameter(name = "error", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "error", required = false) String error,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

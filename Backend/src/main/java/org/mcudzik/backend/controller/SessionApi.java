/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.mcudzik.backend.controller;

import org.mcudzik.backend.model.dto.AddSessionDTO;
import org.mcudzik.backend.model.dto.AddSongDTO;
import org.mcudzik.backend.model.dto.CurrentPlayerStateDTO;
import org.mcudzik.backend.model.dto.GetSessionDTO;
import org.mcudzik.backend.model.dto.SessionPropertiesDTO;
import org.mcudzik.backend.model.dto.TrackObjectDTO;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "session", description = "the session API")
public interface SessionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /session/{session_id}/queue/song : Add new song to queue
     *
     * @param sessionId  (required)
     * @param addSongDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addSongToQueue",
        summary = "Add new song to queue",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/session/{session_id}/queue/song",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addSongToQueue(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId,
        @Parameter(name = "AddSongDTO", description = "", required = true) @Valid @RequestBody AddSongDTO addSongDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /session : Create a new session.
     *
     * @param addSessionDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createSession",
        summary = "Create a new session.",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSessionDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/session",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GetSessionDTO> createSession(
        @Parameter(name = "AddSessionDTO", description = "", required = true) @Valid @RequestBody AddSessionDTO addSessionDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"images\" : [ { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 }, { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 } ], \"href\" : \"href\", \"id\" : \"id\", \"display_name\" : \"display_name\", \"uri\" : \"uri\" }, \"created\" : \"2000-01-23\", \"sessionInvitation\" : { \"code\" : \"code\", \"qrCode\" : \"qrCode\" }, \"name\" : \"name\", \"guests\" : [ { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 }, { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"properties\" : { \"max_songs_per_guest\" : 800827, \"banned_genres\" : [ \"banned_genres\", \"banned_genres\" ], \"generate_playlist\" : true, \"ban_explicit_content\" : false, \"max_number_of_guests\" : 60 }, \"currentPlayerState\" : { \"item\" : { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, \"is_playing\" : true, \"progress_ms\" : 5, \"timestamp\" : 5 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /session/{session_id} : Delete users session by id.
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteSesssionById",
        summary = "Delete users session by id.",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/session/{session_id}"
    )
    default ResponseEntity<Void> deleteSesssionById(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /session/{session_id}/queue/song : Get current song from queue
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCurrentSong",
        summary = "Get current song from queue",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CurrentPlayerStateDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/session/{session_id}/queue/song",
        produces = { "application/json" }
    )
    default ResponseEntity<CurrentPlayerStateDTO> getCurrentSong(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"item\" : { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, \"is_playing\" : true, \"progress_ms\" : 5, \"timestamp\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /session/{session_id} : Get users session by id.
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSessionById",
        summary = "Get users session by id.",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSessionDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/session/{session_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetSessionDTO> getSessionById(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"images\" : [ { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 }, { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 } ], \"href\" : \"href\", \"id\" : \"id\", \"display_name\" : \"display_name\", \"uri\" : \"uri\" }, \"created\" : \"2000-01-23\", \"sessionInvitation\" : { \"code\" : \"code\", \"qrCode\" : \"qrCode\" }, \"name\" : \"name\", \"guests\" : [ { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 }, { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"properties\" : { \"max_songs_per_guest\" : 800827, \"banned_genres\" : [ \"banned_genres\", \"banned_genres\" ], \"generate_playlist\" : true, \"ban_explicit_content\" : false, \"max_number_of_guests\" : 60 }, \"currentPlayerState\" : { \"item\" : { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, \"is_playing\" : true, \"progress_ms\" : 5, \"timestamp\" : 5 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /session/{session_id}/playlist : Get playlist with session tracks.
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     *         or Owner didn&#39;t allow to generate a playlist (status code 404)
     */
    @Operation(
        operationId = "getSessionPlaylist",
        summary = "Get playlist with session tracks.",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Owner didn't allow to generate a playlist")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/session/{session_id}/playlist",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> getSessionPlaylist(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /session/{session_id}/queue : Get current queue
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSessionQueue",
        summary = "Get current queue",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TrackObjectDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/session/{session_id}/queue",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TrackObjectDTO>> getSessionQueue(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /session : Get users sessions.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSesssions",
        summary = "Get users sessions.",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetSessionDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/session",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GetSessionDTO>> getSesssions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"owner\" : { \"images\" : [ { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 }, { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 } ], \"href\" : \"href\", \"id\" : \"id\", \"display_name\" : \"display_name\", \"uri\" : \"uri\" }, \"created\" : \"2000-01-23\", \"sessionInvitation\" : { \"code\" : \"code\", \"qrCode\" : \"qrCode\" }, \"name\" : \"name\", \"guests\" : [ { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 }, { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"properties\" : { \"max_songs_per_guest\" : 800827, \"banned_genres\" : [ \"banned_genres\", \"banned_genres\" ], \"generate_playlist\" : true, \"ban_explicit_content\" : false, \"max_number_of_guests\" : 60 }, \"currentPlayerState\" : { \"item\" : { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, \"is_playing\" : true, \"progress_ms\" : 5, \"timestamp\" : 5 } }, { \"owner\" : { \"images\" : [ { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 }, { \"width\" : 300, \"url\" : \"https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n\", \"height\" : 300 } ], \"href\" : \"href\", \"id\" : \"id\", \"display_name\" : \"display_name\", \"uri\" : \"uri\" }, \"created\" : \"2000-01-23\", \"sessionInvitation\" : { \"code\" : \"code\", \"qrCode\" : \"qrCode\" }, \"name\" : \"name\", \"guests\" : [ { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 }, { \"nickname\" : \"nickname\", \"num_songs_added\" : 1 } ], \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"properties\" : { \"max_songs_per_guest\" : 800827, \"banned_genres\" : [ \"banned_genres\", \"banned_genres\" ], \"generate_playlist\" : true, \"ban_explicit_content\" : false, \"max_number_of_guests\" : 60 }, \"currentPlayerState\" : { \"item\" : { \"duration_ms\" : 2, \"artists\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" }, { \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\" } ], \"album\" : \"\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"uri\" : \"uri\", \"url\" : \"url\" }, \"is_playing\" : true, \"progress_ms\" : 5, \"timestamp\" : 5 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /session/{session_id}/properties : Set session properties
     *
     * @param sessionId  (required)
     * @param sessionPropertiesDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "setSessionProperties",
        summary = "Set session properties",
        tags = { "session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SessionPropertiesDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/session/{session_id}/properties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SessionPropertiesDTO> setSessionProperties(
        @Parameter(name = "session_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("session_id") UUID sessionId,
        @Parameter(name = "SessionPropertiesDTO", description = "", required = true) @Valid @RequestBody SessionPropertiesDTO sessionPropertiesDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"max_songs_per_guest\" : 800827, \"banned_genres\" : [ \"banned_genres\", \"banned_genres\" ], \"generate_playlist\" : true, \"ban_explicit_content\" : false, \"max_number_of_guests\" : 60 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
